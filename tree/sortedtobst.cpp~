// 1  1 2 4 6 8 9 10
#include <iostream>
using namespace std;

// if duplicated avoid
// logn 

// binary search tree - left side right side
//    6
//   4   8
//  2    9 10
// 1

class TNode  {  
    public: 
    int data;  
    TNode* left;  
    TNode* right;  
};

TNode* newNode(int data);

TNode bst(vector<int> v, int start, int end){


 
  int middle = (start + end)/2;
  TNode *root = newNode(v[middle]);

  root->left = bst(v, start, middle - 1);
  root->right = bst(v, middle + 1, end);

  return root;
  
		   

}


TNode* newNode(int data)  
{  
    TNode* node = new TNode(); 
    node->data = data;  
    node->left = NULL;  
    node->right = NULL;  
  
    return node;  
}  
  
/* A utility function to print 
preorder traversal of BST */
void preOrder(TNode* node)  
{  
    if (node == NULL)  
        return;  
    cout << node->data << " ";  
    preOrder(node->left);  
    preOrder(node->right);  
}  
  
// Driver Code 
int main()  
{  
    int arr[] = {1, 2, 3, 4, 5, 6, 7};  
    int n = sizeof(arr) / sizeof(arr[0]);  
  
    /* Convert List to BST */
    TNode *root = sortedArrayToBST(arr, 0, n-1);  
    cout << "PreOrder Traversal of constructed BST \n";  
    preOrder(root);  
  
    return 0;  
} 
